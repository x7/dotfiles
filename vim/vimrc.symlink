"============================================================
"   .vimrc v0.3
"   github.com/x7/dotfiles
"============================================================

set nocompatible   " Must come first

" Bundle Config"{{{
"============================================================

filetype off

" Automatically Install NeoBundle if it is not set up"{{{
if has('win32') || has('win64')
    " windows
    if !filereadable(expand('$HOME/vimfiles/bundle/neobundle.vim/README.md'))
        echo "Installing NeoBundle.."
        silent !git clone https://github.com/Shougo/neobundle.vim \%HOMEPROFILE\%/vimfiles/bundle/neobundle.vim
    endif
    if has('vim_starting')
        " Add neobundle to windows runtime path
        set rtp+=$HOME/vimfiles/bundle/neobundle.vim/
        " Call neobundle
        call neobundle#rc(expand('$HOME/vimfiles/bundle'))
    endif
else
    " linux
    if !filereadable(expand('~/.vim/bundle/neobundle.vim/README.md'))
        echo "Installing NeoBundle.."
        silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
    endif
    if has('vim_starting')
        " Add neobundle to linux runtime path
        set rtp+=~/.vim/bundle/neobundle.vim/
        " Call neobundle
        call neobundle#rc(expand('~/.vim/bundle'))
    endif
endif "}}}

" Let Neobundle manage Neobundle
NeoBundleFetch 'Shougo/neobundle.vim'

"============================================================
"   My Bundles
"============================================================
" UI and Navigation
NeoBundle 'kien/ctrlp.vim'
if has('python')
    NeoBundle 'sjl/gundo.vim'
    NeoBundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim'}
else
    NeoBundle 'mbbill/undotree'
    NeoBundle 'bling/vim-airline'
endif
NeoBundle 'scrooloose/nerdtree'
NeoBundle 'Lokaltog/vim-easymotion'
NeoBundle 'majutsushi/tagbar'

"============================================================
" Language Additions
NeoBundle 'vim-ruby/vim-ruby'
NeoBundle 'tpope/vim-haml'
NeoBundle 'tpope/vim-rails'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'itspriddle/vim-jquery'
NeoBundle 'pangloss/vim-javascript'

"============================================================
" Text Formatting
NeoBundle 'tsaleh/vim-align'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'tpope/vim-surround'
NeoBundle 'kien/rainbow_parentheses.vim'
"NeoBundle 'Yggdroot/indentLine'
"NeoBundle 'terryma/vim-multiple-cursors'

"============================================================
" Colorschemes
NeoBundle 'altercation/vim-colors-solarized'

"============================================================
" Plugins
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'vim-scripts/YankRing.vim'
NeoBundle 'tsaleh/vim-matchit'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'tyru/current-func-info.vim'
NeoBundle 'sickill/vim-pasta'
NeoBundle 'rstacruz/sparkup', {'rtp': 'vim/'}
NeoBundle 'gregsexton/MatchTag'
NeoBundle 'SirVer/ultisnips', { 'disabled': !has('python') }
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimshell.vim'
"NeoBundle 'Shougo/neosnippet.vim'
" build will not work if vimproc is installed, because of cd command
NeoBundle 'Valloric/YouCompleteMe', {
            \ 'vim_version' : '7.3.584',
            \ 'build' :
            \   { 'unix' : 'mkdir -p ~/.vim/ycmbuild && cd ~/.vim/ycmbuild && cmake -G "Unix Makefiles" . ~/.vim/bundle/YouCompleteMe/cpp && make ycm_core' }
            \}
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'vim-scripts/vimwiki'
NeoBundle 'kshenoy/vim-signature'

"============================================================
" Libraries\Dependencies
"NeoBundle 'Shougo/vimproc.vim', { 'build' :
            "\                       { 'windows' : 'make -f make_mingw32.mak',
            "\                          'cygwin' : 'make -f make_cygwin.mak',
            "\                             'mac' : 'make -f make_mac.mak',
            "\                            'unix' : 'make -f make_unix.mak',
            "\                       }
            "\                     }
NeoBundle 'MarcWeber/vim-addon-mw-utils'
NeoBundle 'tomtom/tlib_vim'
NeoBundle 'L9'

NeoBundleCheck
"============================================================
"}}}

" Basic options"{{{
"============================================================

filetype on                       " Enable file type detection
filetype plugin indent on         " Turn on file type detection.
syntax enable                     " Turn on syntax highlighting before setting colorscheme.

set encoding=utf-8
set termencoding=utf-8

set nowrap                        " Turn off line wrapping
set ruler                         " Show cursor position
set number                        " Show line number
set laststatus=2                  " Show the status line all the time
set synmaxcol=2048                " Syntax coloring lines that are too long just slows down the world
set hidden                        " Handle multiple buffers better
set title                         " Set the terminal's title
set visualbell                    " No beeping
set noshowmode                    " Don't display the mode you're in
set showcmd                       " Show (partial) command in the last line of the screen
set showmatch                     " Show matching brackets
set backspace=indent,eol,start    " Intuitive backspacing
set virtualedit=all               " Allow the cursor to go in to "invalid" places
set colorcolumn=80
set scrolloff=4                   " Show 4 lines of context around the cursor
set winminwidth=20
set guioptions-=T                 " Hide toolbar
set fillchars=                    " Remove all fill charachters

set foldenable                    " Text folding
set foldmethod=marker

set wildmenu                      " Enhanced command line completion
set wildmode=list:longest         " Complete files like a shell
set history=500                   " Keep history

set nobackup                      " Don't make a backup before overwriting a file
set nowritebackup                 " And again
set directory+=.,$TMP,~/tmp       " fixes Gdiff

set ignorecase                    " Case-insensitive searching..
set smartcase                     " ..but case-sensitive if expression contains a capital letter
set hlsearch                      " Highlight matches
set incsearch                     " Highlight matches as you type

set tabstop=4                     " Global tab width
set shiftwidth=4                  " And again, related
set expandtab                     " Turn tabs into spaces

set mouse=a

" Disable Background Color Erase (BCE) so that color schemes
" work properly when Vim is used inside tmux and GNU screen.
if &term =~ '256color'
    set t_ut=
endif

" Colorscheme
set t_Co=256                      " Use 256 colors in terminals
if has("gui_running")
    set background=light              " Background.
    silent! colorscheme solarized     " Best colorscheme ever
else
    set background=dark
    let g:solarized_termcolors=256    " Degrade to 256 colors
    silent! colorscheme solarized
endif

" set non visible charachters
set list
set listchars=tab:▸\ ,eol:¬,trail:⋅,extends:❯,precedes:❮
set showbreak=↪
hi NonText ctermfg=235 guifg=#eee8d5

"============================================================
"}}}

" Plugin options"{{{
"============================================================
" Signature
let g:SignatureEnableDefaultMappings=2

"============================================================
" CtrlP
let g:ctrlp_max_height = 20
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\.git$\|\.hg$\|\.svn$',
    \ 'file': '\.exe$\|\.so$\|\.dll$\|\.swp$',
    \ }

"============================================================
" YouCompleteMe
let g:ycm_key_list_select_completion = ['<Tab>', '<Down>']
let g:ycm_key_list_previous_completion = ['<S-Tab>', '<Up>']
let g:ycm_key_invoke_completion = ''


"============================================================
" GitGutter
" must come after setting the colorscheme
highlight SignColumn ctermbg=234
let g:gitgutter_realtime = 0
let g:gitgutter_eager = 0

"============================================================
" Undotree
if has("persistent_undo")
    silent !mkdir -p ~/.vim/undofiles/
    set undodir=~/.vim/undofiles/
    set undofile
endif

"============================================================
" Ultisnips
set rtp+=$HOME/.dotfiles/vim
let g:UltiSnipsExpandTrigger="<C-@>"
let g:UltiSnipsJumpForwardTrigger='<C-@>'
let g:UltiSnipsJumpBackwardTrigger='<C-S-@>'
let g:UltiSnipsSnippetsDir='~/.dotfiles/vim/snippets'
let g:UltiSnipsEditSplit='horizontal'
let g:UltiSnipsSnippetDirectories=["UltiSnips", "snippets"]

au Filetype rails :UltiSnipsAddFiletypes rails.ruby

"============================================================
" IndentLine
"let g:indentLine_char = '¦'
"let g:indentLine_color_term = 235
"let g:indentLine_color_gui = '#eee8d5'

"============================================================
"}}}

" Mappings"{{{
"============================================================

let mapleader = ","
nnoremap ; :
"inoremap jj <ESC>
inoremap jk <Esc>
inoremap kj <Esc>

" Sudo write
command! -bar -nargs=0 Sudow  silent! exec "write !sudo tee % >/dev/null"  | silent! edit!

" cd to the directory containing the file in the buffer
nnoremap <Leader>cd :lcd %:h<CR>

" Quick edit this file
nnoremap <silent> <Leader>ev :edit $MYVIMRC<CR>
nnoremap <silent> <Leader>sv :w<CR>:source $MYVIMRC<CR>

" Clear search highlighting
nnoremap <Leader>n :nohlsearch<CR>

" Swap two words
nnoremap <silent> gw :s/\(\%#\w\+\)\(\_W\+\)\(\w\+\)/\3\2\1/<CR>`'

" Append line above to the current line
nnoremap gt VkJlv$hd0Pa <ESC>0

" Command Window
au CmdwinEnter * nmap <buffer> <Space> $l<C-c>

" Reselect visual blcok after indenting
vnoremap < <gv
vnoremap > >gv

" Map Q to repeat the last used macro
map Q @@

" Bubble single & multiple lines
nmap <silent> <S-Up>   :move -2<CR>
nmap <silent> <S-Down> :move +1<CR>
vmap <silent> <S-Up>   :move -2 \| normal gv<CR>
vmap <silent> <S-Down> <ESC>:execute "'<,'>move " line("'>")+1 " \| normal gv"<CR>
"vmap <silent> <S-Down> :call <SID>MoveBlockDown()<CR> "{{{
"function! s:MoveBlockDown() range
    "execute "'<,'>m " a:lastline+1 " | normal gv"
"endfunction
"}}}

"============================================================
" Fix broken vim regexes when searching
nnoremap / /\v
vnoremap / /\v
cnoremap s/ s/\v
nnoremap <Leader>s :%s/\v

"============================================================
" F-keys maps

" F1 maped for help in vim files
au Filetype vim noremap <buffer> <F1> <Esc>:help <C-r><C-w><CR>

" F2 nerd tree sidebar
map <F2> :NERDTreeToggle<CR>

" F3 yank ring window
map <F3> :YRShow<CR>

" F4 run python scripts
autocmd BufRead *.py nmap <F4> :w<CR>:!python %<CR>

" F5 undo sidebar
if has('python')
    nnoremap <F5> :GundoToggle<CR>
else
    nnoremap <F5> :UndotreToggle<CR>
endif

" F6

" F7

" F8
nmap <F8> :TagbarToggle<CR>

" F9 paste mode toggle
nnoremap <silent> <F9> :set invpaste<CR>
set pastetoggle=<F9>

" F10

" F11

" F12 reserved for Guake

"============================================================
" Split window and select it
nnoremap <Leader>v <C-w>v<C-w>l
nnoremap <Leader>h <C-w>s<C-w>j

" Split window navigation
nnoremap H <C-w>h
nnoremap J <C-w>j
nnoremap K <C-w>k
nnoremap L <C-w>l

" Split window resizing
map <C-j> :resize +1<CR>
map <C-k> :resize -1<CR>
map <C-h> :vertical resize +1<CR>
map <C-l> :vertical resize -1<CR>

"============================================================
" Capitalize
imap <C-u> <Esc>guiw~ea
if (&tildeop)
  nmap gcw guiw~l
  nmap gcW guiW~l
  nmap gcs guis~l
  nmap gc$ gu$~l
  nmap gcgc guu~l
  nmap gcc guu~l
  vmap gc gu~l
else
  nmap gcw guiw~h
  nmap gcW guiW~h
  nmap gcs guis~h
  nmap gc$ gu$~h
  nmap gcgc guu~h
  nmap gcc guu~h
  vmap gc gu~h
endif

"}}}

" Abbreviations {{{
"============================================================

iabbrev lorem Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras sollicitudin quam eget libero pulvinar id condimentum velit sollicitudin. Proin cursus scelerisque dui ac condimentum. Nullam quis tellus leo. Morbi consectetur, lectus a blandit tincidunt, tortor augue tincidunt nisi, sit amet rhoncus tortor velit eu felis.

"============================================================
" }}}

" Language specific settings"{{{
"============================================================
" Ruby
autocmd FileType ruby,erb setlocal foldmethod=syntax shiftwidth=2 tabstop=2

"============================================================
" CSS
autocmd FileType css setlocal foldmethod=indent shiftwidth=2 tabstop=2

"============================================================
" SASS
autocmd FileType sass set sw=2 ts=2 noet
autocmd FileType sass SyntasticDisable

"============================================================
" }}}

" Autocommands {{{
"============================================================

augroup General
    autocmd!

    " Save when loosing focus
    au FocusLost * :silent! wa

    " Disable paste mode when leaving insert mode
    au InsertLeave * set nopaste

    " Vim Help settings
    au FileType help au BufEnter,BufWinEnter <buffer>
                \ call <SID>SetupHelpWindow()

augroup END

augroup Formatting
    autocmd!

    " Remove trailing whitespace from selected filetypes
    au FileType html,css,sass,javascript,php,python,ruby,psql,vim
                \ au BufWritePre <buffer>
                \ :silent! call <SID>StripTrailingWhitespace()

    " Fix space highlighting in diff files
    au FileType diff hi clear RedundantSpaces
                \ | hi DiffCol ctermbg=238 cterm=bold
                \ | match DiffCol /^[ +-]\([+-]\)\@!/

    " Fix gitcommit formatting
    au FileType gitcommit setl formatoptions+=t formatoptions-=l textwidth=72 colorcolumn=72

    " Format plain text and e-mails correctly
    au BufNewFile,BufRead *.txt setl ft=text
    au FileType mail,text setl formatoptions+=t formatoptions-=l textwidth=72 colorcolumn=72

augroup END

"============================================================
" }}}

" OS specific settings"{{{
"============================================================

if has("unix")                        " code common to Cygwin and Linux
    "
    if has("win32unix")               " code for Cygwin but not Linux
        if has("gui_gtk2")
            set guifont=Consolas\ 11      " Font family and font size.
        endif
    else                              " code for Linux but not Cygwin
        "set guifont=Monospace\ 10
        set guifont=DejaVu\ Sans\ Mono\ For\ Powerline\ 10
    endif
elseif has('win32') || has('win64')   " code for Windows
    if has("gui_running")               " GUI
        set guifont=Consolas:h11          " Font family and font size. Windows only
        set guioptions-=T                 " Hide toolbar.
        au GUIEnter * simalt ~x           " Maximaize window on Windows
        "set guioptions-=r                 " Don't show right scrollbar
    endif
else
    echoerr "Unknown OS"
endif

"============================================================
"}}}

" Functions"{{{
"============================================================
function! s:SetupHelpWindow()
    wincmd L
    " Set current window width
    vertical resize 85
    " Set local options
    setlocal nonumber winfixwidth colorcolumn=
    nnoremap <buffer> <Space> <C-]> " Space selects subject
    nnoremap <buffer> <BS>    <C-T> " Backspace to go back
endfunction

function! s:StripTrailingWhitespace()
    " mark current position
    normal mZ
    " remove trailing spaces
    %s/\s\+$//e
    " go back to your current position
    normal `Z
endfunction
"}}}
